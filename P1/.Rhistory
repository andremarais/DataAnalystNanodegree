scale_fill_brewer(palette = "Set1")
#
require(ggplot2)
ggplot()+
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set1")
#
FNB <- read.table("C:/Users/anmarais/Desktop/GitHub/USClientGeomapping/stores/FNB_ATMs.txt", sep="\n", strip.white =T)
address <- FNB[which(as.character(gregexpr("Address:", FNB[,1], ignore.case = T)) != -1),1]
lat <- as.character(FNB[which(as.character(gregexpr("Latitude:", FNB[,1], ignore.case = T)) != -1),1])
lon <- as.character(FNB[which(as.character(gregexpr("Longitude:", FNB[,1], ignore.case = T)) != -1),1])
lat2 <- sapply(lat, function(x) substring(x, min(gregexpr("[0-9]", x)[[1]]), max(gregexpr("[0-9]", x)[[1]])))
lon2 <- sapply(lon, function(x) substring(x, min(gregexpr("[0-9]", x)[[1]]), max(gregexpr("[0-9]", x)[[1]])))
head(address)
head(lon2)
lat2 <- as.character(sapply(lat, function(x) substring(x, min(gregexpr("[0-9]", x)[[1]]), max(gregexpr("[0-9]", x)[[1]]))))
lon2 <- as.character(sapply(lon, function(x) substring(x, min(gregexpr("[0-9]", x)[[1]]), max(gregexpr("[0-9]", x)[[1]]))))
head(lon)
head(lon2)
address[2806]
address[2805]
address[2806] <- NULL
address <- address[-2806]
FNB2 <- cbind(address,lat2,lon2)
head(FNB2)
address <- as.character(FNB[which(as.character(gregexpr("Address:", FNB[,1], ignore.case = T)) != -1),1])
FNB2 <- cbind(address,lat2,lon2)
FNB2 <- cbind(address,lat2,lon2)
write.csv(FNB2, "FNB_ATMs.csv", row.names)
head(FNB2)
FNB2$lat <- -FNB$lat2
FNB2$lat <- -as.numeric(FNB$lat2)
head(FNB2)
FNB2 <- cbind(address,-lat2,lon2)
FNB2 <- cbind(address,-1 * lat2,lon2)
lat2 <- as.numeric(sapply(lat, function(x) substring(x, min(gregexpr("[0-9]", x)[[1]]), max(gregexpr("[0-9]", x)[[1]]))))
lat2 <- as.character(sapply(lat, function(x) substring(x, min(gregexpr("[0-9]", x)[[1]]), max(gregexpr("[0-9]", x)[[1]]))))
lon2 <- as.character(sapply(lon, function(x) substring(x, min(gregexpr("[0-9]", x)[[1]]), max(gregexpr("[0-9]", x)[[1]]))))
head(FNB2)
FNB2 <- cbind(address,lat2,lon2)
FNB2 <- FNB[-2806]
FNB2 <- cbind(address,lat2,lon2)
address <- address[-2806]
FNB2 <- cbind(address,lat2,lon2)
colnames(FNB2)
colnames(FNB2) <- c("address", "lat", "lon")
write.csv(FNB2, "FNB_ATMs.csv", row.names = F)
randomForest
require(randomForest)
?randomForest
require(ggmap)
?ggmap
geocode("268 West avenue", output = 'more')
geocode("268 West avenue, centurion, south africa", output = 'more')
require(RODBC)
require(RODBC)
conn <- odbcConnect("Retail")
Lapse.clients <- odbcQuery(conn, "
declare @cdk as varchar(10)
set @cdk = (select max(CurrentDateKey) from MOMDW1.fact.ClientCurrentCoverage);
with LapsedClients as (
select distinct
client.ClientNo,
cpc.ClientKey,
apmt.MovementSystemDateKey,
pol.ProductHouseDesc,
case when pol.InceptionDate = 0 then NULL else  DATEDIFF(month, CONVERT(datetime,cast(pol.inceptiondate as varchar)), CONVERT(datetime,convert(char(8),apmt.MovementSystemDateKey))) end as PolAgeMonths,
substring(cast(MovementSystemDateKey as varchar),5,2) as CancelMonth
from momdw1.fact.AllPolicyMovementsTransactional apmt
inner join momdw1.dim.Policy pol
on pol.PolicyKey= apmt.PolicyKey
inner join MOMDW1.dim.Movement movement
on apmt.MovementKey = movement.MovementKey
inner join MOMDW1.fact.ClientPeriodicCoverage CPC
on apmt.PolicyKey = CPC.PolicyKey
and left(apmt.MovementSystemDateKey,6) = left(cpc.PeriodicDateKey,6)
inner join MOMDW1.dim.Client client
on cpc.ClientKey = client.ClientKey
inner join MOMDW1.dim.ClientRole cr
on cpc.ClientRoleKey = cr.ClientRoleKey
where apmt.MovementCodeDD in ('200','201','202','203')
and pol.ProductHouseDesc='Myriad'
and left(apmt.MovementSystemDateKey,6) > 201101
and left(apmt.MovementSystemDateKey,6) < cast(YEAR(GETDATE()) as varchar) + cast(month(GETDATE()) as varchar)
and apmt.StatusCodeDD in ('30', '01','10')
and apmt.SourceTableDD = 'FCONTRACTPF'
and client.ClientType = 'n'
and cr.ClientRoleDesc = 'policy holder'
and pol.InceptionDate <> 0)
select
LapsedClients.ClientNo,
pol.PolicyNo,
pol.ProductHouseDesc
from
MOMDW1.fact.ClientPeriodicCoverage CPC
inner join LapsedClients
on cpc.ClientKey = LapsedClients.ClientKey
and left(cpc.PeriodicDateKey,6) = left(LapsedClients.MovementSystemDateKey,6)
inner join	MOMDW1.dim.Policy pol
on cpc.PolicyKey = pol.PolicyKey
inner join MOMDW1.dim.ClientRole cr
on cpc.ClientRoleKey = cr.ClientRoleKey
and cr.ClientRoleDesc = 'policy holder'
inner join MOMDW1.dim.PolicyStatus ps
on cpc.PolicyStatusKey = ps.PolicyStatusKey
and ps.InforceIndicator = 'yes'
")
table(Lapse.clients)
head(Lapse.clients)
str(Lapse.clients)
Lapsed.clients <- odbcQuery(conn, "
declare @cdk as varchar(10)
set @cdk = (select max(CurrentDateKey) from MOMDW1.fact.ClientCurrentCoverage);
with LapsedClients as (
select distinct
client.ClientNo,
cpc.ClientKey,
apmt.MovementSystemDateKey,
pol.ProductHouseDesc,
case when pol.InceptionDate = 0 then NULL else  DATEDIFF(month, CONVERT(datetime,cast(pol.inceptiondate as varchar)), CONVERT(datetime,convert(char(8),apmt.MovementSystemDateKey))) end as PolAgeMonths,
substring(cast(MovementSystemDateKey as varchar),5,2) as CancelMonth
from momdw1.fact.AllPolicyMovementsTransactional apmt
inner join momdw1.dim.Policy pol
on pol.PolicyKey= apmt.PolicyKey
inner join MOMDW1.dim.Movement movement
on apmt.MovementKey = movement.MovementKey
inner join MOMDW1.fact.ClientPeriodicCoverage CPC
on apmt.PolicyKey = CPC.PolicyKey
and left(apmt.MovementSystemDateKey,6) = left(cpc.PeriodicDateKey,6)
inner join MOMDW1.dim.Client client
on cpc.ClientKey = client.ClientKey
inner join MOMDW1.dim.ClientRole cr
on cpc.ClientRoleKey = cr.ClientRoleKey
where apmt.MovementCodeDD in ('200','201','202','203')
and pol.ProductHouseDesc='Myriad'
and left(apmt.MovementSystemDateKey,6) > 201101
and left(apmt.MovementSystemDateKey,6) < cast(YEAR(GETDATE()) as varchar) + cast(month(GETDATE()) as varchar)
and apmt.StatusCodeDD in ('30', '01','10')
and apmt.SourceTableDD = 'FCONTRACTPF'
and client.ClientType = 'n'
and cr.ClientRoleDesc = 'policy holder'
and pol.InceptionDate <> 0)
select
LapsedClients.ClientNo,
pol.PolicyNo,
pol.ProductHouseDesc
from
MOMDW1.fact.ClientPeriodicCoverage CPC
inner join LapsedClients
on cpc.ClientKey = LapsedClients.ClientKey
and left(cpc.PeriodicDateKey,6) = left(LapsedClients.MovementSystemDateKey,6)
inner join	MOMDW1.dim.Policy pol
on cpc.PolicyKey = pol.PolicyKey
inner join MOMDW1.dim.ClientRole cr
on cpc.ClientRoleKey = cr.ClientRoleKey
and cr.ClientRoleDesc = 'policy holder'
inner join MOMDW1.dim.PolicyStatus ps
on cpc.PolicyStatusKey = ps.PolicyStatusKey
and ps.InforceIndicator = 'yes'
")
head(Lapsed.clients)
str(Lapsed.clients)
Lapsed.clients[[1]]
Lapsed.clients <- odbcQuery(conn, "
declare @cdk as varchar(10)
set @cdk = (select max(CurrentDateKey) from MOMDW1.fact.ClientCurrentCoverage)
select
b.PolicyFull,
b.PolicyDescription,
b.ProductHouseDesc,
b.PolicyNo,
a.*
from
MomDW1.fact.ClientCurrentCoverage CCC
inner join MOMDW1.dim.vwClient a
on a.ClientKey = ccc.ClientKey
and ccc.CurrentDateKey = @cdk
and a.CurrentMember = 1
inner join MOMDW1.dim.Policy b
on ccc.PolicyKey = b.PolicyKey
and ccc.CurrentDateKey = @cdk
and b.currentmember = 1
inner join MOMDW1.dim.ClientRole c
on ccc.ClientRoleKey = c.ClientRoleKey
inner join MOMDW1.dim.PolicyStatus d
on ccc.PolicyStatusKey = d.PolicyStatusKey
--inner join MOMDW1.fact.PolicyCurrentSnapshot PCS
--	on ccc.PolicyKey = pcs.PolicyKey
--	and pcs.CurrentDateKey = @cdk
--	and ccc.CurrentDateKey = @cdk
where c.ClientRoleDesc = 'policy holder'
--and a.FirstName = 'michael'
--and a.Surname = 'skinner'
and a.EmailAddress = 'puttputt@intnet.mu'
--and PolicyNo = '80243108'
and d.InforceIndicator = 'yes'
")
Lapsed.clients
Lapsed.clients <- sqlQuery(conn, "
declare @cdk as varchar(10)
set @cdk = (select max(CurrentDateKey) from MOMDW1.fact.ClientCurrentCoverage);
with LapsedClients as (
select distinct
client.ClientNo,
cpc.ClientKey,
apmt.MovementSystemDateKey,
pol.ProductHouseDesc,
case when pol.InceptionDate = 0 then NULL else  DATEDIFF(month, CONVERT(datetime,cast(pol.inceptiondate as varchar)), CONVERT(datetime,convert(char(8),apmt.MovementSystemDateKey))) end as PolAgeMonths,
substring(cast(MovementSystemDateKey as varchar),5,2) as CancelMonth
from momdw1.fact.AllPolicyMovementsTransactional apmt
inner join momdw1.dim.Policy pol
on pol.PolicyKey= apmt.PolicyKey
inner join MOMDW1.dim.Movement movement
on apmt.MovementKey = movement.MovementKey
inner join MOMDW1.fact.ClientPeriodicCoverage CPC
on apmt.PolicyKey = CPC.PolicyKey
and left(apmt.MovementSystemDateKey,6) = left(cpc.PeriodicDateKey,6)
inner join MOMDW1.dim.Client client
on cpc.ClientKey = client.ClientKey
inner join MOMDW1.dim.ClientRole cr
on cpc.ClientRoleKey = cr.ClientRoleKey
where apmt.MovementCodeDD in ('200','201','202','203')
and pol.ProductHouseDesc='Myriad'
and left(apmt.MovementSystemDateKey,6) > 201101
and left(apmt.MovementSystemDateKey,6) < cast(YEAR(GETDATE()) as varchar) + cast(month(GETDATE()) as varchar)
and apmt.StatusCodeDD in ('30', '01','10')
and apmt.SourceTableDD = 'FCONTRACTPF'
and client.ClientType = 'n'
and cr.ClientRoleDesc = 'policy holder'
and pol.InceptionDate <> 0)
select
LapsedClients.ClientNo,
pol.PolicyNo,
pol.ProductHouseDesc
from
MOMDW1.fact.ClientPeriodicCoverage CPC
inner join LapsedClients
on cpc.ClientKey = LapsedClients.ClientKey
and left(cpc.PeriodicDateKey,6) = left(LapsedClients.MovementSystemDateKey,6)
inner join	MOMDW1.dim.Policy pol
on cpc.PolicyKey = pol.PolicyKey
inner join MOMDW1.dim.ClientRole cr
on cpc.ClientRoleKey = cr.ClientRoleKey
and cr.ClientRoleDesc = 'policy holder'
inner join MOMDW1.dim.PolicyStatus ps
on cpc.PolicyStatusKey = ps.PolicyStatusKey
and ps.InforceIndicator = 'yes'
")
routeQueryCheck()
head(Lapsed.clients)
table(Lapsed.clients)
table(c(Lapsed.clients$ClientNo, Lapsed.clients$ProductHouseDesc))
table(c(Lapsed.clients$ProductHouseDesc,Lapsed.clients$ClientNo))
table(c(Lapsed.clients$ProductHouseDesc))
table(c(Lapsed.clients$ProductHouseDesc, Lapsed.clients$ClientNo))
?table
head(table(c(Lapsed.clients$ProductHouseDesc, Lapsed.clients$ClientNo)))
remove(Lapse.clients)
str(Lapsed.clients)
table(Lapsed.clients[,c(1,3)])
head(table(Lapsed.clients[,c(1,3)]), 100)
Lapsed.clients <- sqlQuery(conn, "
declare @cdk as varchar(10)
set @cdk = (select max(CurrentDateKey) from MOMDW1.fact.ClientCurrentCoverage);
with LapsedClients as (
select distinct
client.ClientNo,
cpc.ClientKey,
apmt.MovementSystemDateKey,
pol.ProductHouseDesc,
cast(client.clientno as varchar) + cast(apmt.movementsystemdatekey as varchar) as ClientNoLapseDate,
case when pol.InceptionDate = 0 then NULL else  DATEDIFF(month, CONVERT(datetime,cast(pol.inceptiondate as varchar)), CONVERT(datetime,convert(char(8),apmt.MovementSystemDateKey))) end as PolAgeMonths,
substring(cast(MovementSystemDateKey as varchar),5,2) as CancelMonth
from momdw1.fact.AllPolicyMovementsTransactional apmt
inner join momdw1.dim.Policy pol
on pol.PolicyKey= apmt.PolicyKey
inner join MOMDW1.dim.Movement movement
on apmt.MovementKey = movement.MovementKey
inner join MOMDW1.fact.ClientPeriodicCoverage CPC
on apmt.PolicyKey = CPC.PolicyKey
and left(apmt.MovementSystemDateKey,6) = left(cpc.PeriodicDateKey,6)
inner join MOMDW1.dim.Client client
on cpc.ClientKey = client.ClientKey
inner join MOMDW1.dim.ClientRole cr
on cpc.ClientRoleKey = cr.ClientRoleKey
where apmt.MovementCodeDD in ('200','201','202','203')
and pol.ProductHouseDesc='Myriad'
and left(apmt.MovementSystemDateKey,6) > 201101
and left(apmt.MovementSystemDateKey,6) < cast(YEAR(GETDATE()) as varchar) + cast(month(GETDATE()) as varchar)
and apmt.StatusCodeDD in ('30', '01','10')
and apmt.SourceTableDD = 'FCONTRACTPF'
and client.ClientType = 'n'
and cr.ClientRoleDesc = 'policy holder'
and pol.InceptionDate <> 0
)
select distinct
LapsedClients.ClientNo,
pol.PolicyNo,
pol.ProductHouseDesc ,
ClientNoLapseDate
from
MOMDW1.fact.ClientPeriodicCoverage CPC
inner join LapsedClients
on cpc.ClientKey = LapsedClients.ClientKey
and left(cpc.PeriodicDateKey,6) = left(LapsedClients.MovementSystemDateKey,6)
inner join	MOMDW1.dim.Policy pol
on cpc.PolicyKey = pol.PolicyKey
inner join MOMDW1.dim.ClientRole cr
on cpc.ClientRoleKey = cr.ClientRoleKey
and cr.ClientRoleDesc = 'policy holder'
inner join MOMDW1.dim.PolicyStatus ps
on cpc.PolicyStatusKey = ps.PolicyStatusKey
and ps.InforceIndicator = 'yes'
order by ClientNoLapseDate
")
head(table(Lapsed.clients[,c(1,4)]), 100)
head(Lapsed.clients)
head(table(Lapsed.clients[,c(3,4)]), 100)
head(Lapsed.clients)
head(table(Lapsed.clients[,c(3,4)]), 100)
head(table(Lapsed.clients[,c(1,3)]), 100)
head(table(Lapsed.clients[,c(4,3)]), 100)
d <- head(table(Lapsed.clients[,c(4,3)]), 100)
d[100,1]
row.names(d)[100]
as.character(row.names(d)[100])
Lapsed.clients <- sqlQuery(conn, "
declare @cdk as varchar(10)
set @cdk = (select max(CurrentDateKey) from MOMDW1.fact.ClientCurrentCoverage);
with LapsedClients as (
select distinct
client.ClientNo,
cpc.ClientKey,
apmt.MovementSystemDateKey,
pol.ProductHouseDesc,
cast(client.clientno as varchar) + cast(apmt.movementsystemdatekey as varchar) + 'a' as ClientNoLapseDate,
case when pol.InceptionDate = 0 then NULL else  DATEDIFF(month, CONVERT(datetime,cast(pol.inceptiondate as varchar)), CONVERT(datetime,convert(char(8),apmt.MovementSystemDateKey))) end as PolAgeMonths,
substring(cast(MovementSystemDateKey as varchar),5,2) as CancelMonth
from momdw1.fact.AllPolicyMovementsTransactional apmt
inner join momdw1.dim.Policy pol
on pol.PolicyKey= apmt.PolicyKey
inner join MOMDW1.dim.Movement movement
on apmt.MovementKey = movement.MovementKey
inner join MOMDW1.fact.ClientPeriodicCoverage CPC
on apmt.PolicyKey = CPC.PolicyKey
and left(apmt.MovementSystemDateKey,6) = left(cpc.PeriodicDateKey,6)
inner join MOMDW1.dim.Client client
on cpc.ClientKey = client.ClientKey
inner join MOMDW1.dim.ClientRole cr
on cpc.ClientRoleKey = cr.ClientRoleKey
where apmt.MovementCodeDD in ('200','201','202','203')
and pol.ProductHouseDesc='Myriad'
and left(apmt.MovementSystemDateKey,6) > 201101
and left(apmt.MovementSystemDateKey,6) < cast(YEAR(GETDATE()) as varchar) + cast(month(GETDATE()) as varchar)
and apmt.StatusCodeDD in ('30', '01','10')
and apmt.SourceTableDD = 'FCONTRACTPF'
and client.ClientType = 'n'
and cr.ClientRoleDesc = 'policy holder'
and pol.InceptionDate <> 0
)
select distinct
LapsedClients.ClientNo,
pol.PolicyNo,
pol.ProductHouseDesc ,
ClientNoLapseDate
from
MOMDW1.fact.ClientPeriodicCoverage CPC
inner join LapsedClients
on cpc.ClientKey = LapsedClients.ClientKey
and left(cpc.PeriodicDateKey,6) = left(LapsedClients.MovementSystemDateKey,6)
inner join	MOMDW1.dim.Policy pol
on cpc.PolicyKey = pol.PolicyKey
inner join MOMDW1.dim.ClientRole cr
on cpc.ClientRoleKey = cr.ClientRoleKey
and cr.ClientRoleDesc = 'policy holder'
inner join MOMDW1.dim.PolicyStatus ps
on cpc.PolicyStatusKey = ps.PolicyStatusKey
and ps.InforceIndicator = 'yes'
order by ClientNoLapseDate
")
d <- head(table(Lapsed.clients[,c(4,3)]), 100)
d
month.name
months(1,abbreviate = T)
months(x = 1, abbreviate =  = T)
?months
?months
?month.name
format(ISOdate(2000, 1:12, 1), "%b")
head(d)
require(ODBC)
require(RODBC)
gc()
ls()
remove(ls())
retail <- odbcConnect("Retail")
setwd("C:/Github/DataAnalystNanodegree/P1")
stroop <- read.csv("stroopdata.csv")
head(stroop)
hist(stroop$Congruent)
hist(stroop$Incongruent)
require(ggplot2)
?geom_histogram
ggplot(stroop) + geom_histogram()
ggplot(stroop) + geom_density()
ggplot(stroop) + geom_density()
ggplot(stroop) + geom_density(aes(x = Congruent))
ggplot(stroop) + geom_density(aes(x = Congruent)) + geom_density(aes(x = Incongruent))
ggplot(stroop) + geom_density(aes(x = Congruent), fill = "darkgreen") + geom_density(aes(x = Incongruent))
ggplot(stroop) + geom_density(aes(x = Congruent), fill = "olivegreen") + geom_density(aes(x = Incongruent))
ggplot(stroop) + geom_density(aes(x = Congruent), fill = "thistle4") + geom_density(aes(x = Incongruent))
ggplot(stroop) + geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4") + geom_density(aes(x = Incongruent))
ggplot(stroop) + geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8) + geom_density(aes(x = Incongruent))
geom_density(aes(x = Incongruent), fill = "lightsteelbue3", col = "lightsteelblue4", alpha = .8 )
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8) +
geom_density(aes(x = Incongruent), fill = "lightsteelbue3", col = "lightsteelblue4", alpha = .8 )
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8 )
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 2) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 3 )
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1)
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_line(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1, stat = "density")
ggplot(stroop) +
geom_histogram(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1)
hist(stroop$Congruent)
ggplot(stroop) +
geom_histogram(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1)
hist(stroop$Congruent)
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1)
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1) +
xlab("Seconds") +
ggtitle("Density plot of time take to complete test")
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1) +
xlab("Seconds") +
ggtitle("Density plot of time take to complete test")+
scale_fill_continuous(labels = c("Blue: Icongruent", "Purple: Congruent"))
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1) +
xlab("Seconds") +
ggtitle("Density plot of time take to complete test")+
scale_fill_manual(labels = c("Blue: Icongruent", "Purple: Congruent"))
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1) +
xlab("Seconds") +
ggtitle("Density plot of time take to complete test")
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1) +
xlab("Seconds") +
ggtitle("Density plot of time take to complete test\nBlue: Incongruent | Purple: Congruent")
ggtitle("Density plot of time take to complete test\nPurple: Congruent |Blue: Incongruent")
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1) +
xlab("Seconds") +
ggtitle("Density plot of time take to complete test\nPurple: Congruent |Blue: Incongruent")
?abline
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1) +
xlab("Seconds") +
ggtitle("Density plot of time take to complete test\nPurple: Congruent | Blue: Incongruent") +
geom_abline(v  = mean(stroop$Congruent))
?geom_abline
?geom_vline
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1) +
xlab("Seconds") +
ggtitle("Density plot of time take to complete test\nPurple: Congruent | Blue: Incongruent") +
geom_vline(xintercept  = mean(stroop$Congruent))
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1) +
xlab("Seconds") +
ggtitle("Density plot of time take to complete test\nPurple: Congruent | Blue: Incongruent") +
geom_vline(xintercept  = mean(stroop$Congruent), col = "thistle4", type = "longdash", size = 2)
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1) +
xlab("Seconds") +
ggtitle("Density plot of time take to complete test\nPurple: Congruent | Blue: Incongruent") +
geom_vline(xintercept  = mean(stroop$Congruent), col = "thistle4", linetype = "longdash", size = 2)
ggplot(stroop) +
geom_density(aes(x = Congruent), fill = "thistle3", col = "thistle4", alpha = .8, size = 1) +
geom_density(aes(x = Incongruent), fill = "lightsteelblue3", col = "lightsteelblue4", alpha = .8, size = 1) +
xlab("Seconds") +
ggtitle("Density plot of time take to complete test\nPurple: Congruent | Blue: Incongruent") +
geom_vline(xintercept  = mean(stroop$Congruent), col = "thistle4", linetype = "longdash", size = 1)+
geom_vline(xintercept  = mean(stroop$Incongruent), col = "lightsteelblue4", linetype = "longdash", size = 1)
table(stroop)
head(stroop)
stroop.means <- apply(stroop,2, FUN = "mean")
stroop.means
stroop
stroop$difference <- stroop$Congruent - stroop$Incongruent
hist(stroop$difference)
